<?xml version="1.0" encoding="utf-8"?>
<project name="remove-opengis" default="update">
  <!-- Use this property to run script on your project location -->
  <property name="project.dir" location="." />
  <!-- macros -->
  <macrodef name="refactor">
    <attribute name="package1" />
    <attribute name="class1" />
    <attribute name="package2" />
    <attribute name="class2" />
    <sequential>
      <fileset id="@{class1}.files" dir="${project.dir}" includes="**/*.java">
        <contains text="import @{package1}.@{class1};" casesensitive="yes" />
      </fileset>
      <echo message="Refactor @{package1}.@{class1} -&gt; @{package2}.@{class2}" />
      <replaceregexp byline="true">
        <fileset refid="@{class1}.files" />
        <regexp pattern="(\s)@{class1}(\W)" />
        <substitution expression="\1@{class2}\2" />
      </replaceregexp>
      <replace dir="${project.dir}" includes="**/*.java" summary="yes">
        <replacefilter>
          <replacetoken>(\s)@{package1}\.@{class1}(\W)</replacetoken>
          <replacevalue>\1@{package2}.@{class2}\2</replacevalue>
        </replacefilter>
      </replace>
    </sequential>
  </macrodef>
  <macrodef name="remove">
    <attribute name="package" />
    <attribute name="class" />
    <attribute name="removed" default="// removed" />
    <sequential>
      <fileset id="@{class}.files" dir="${project.dir}" includes="**/*.java">
        <contains text="import @{package}\.@{class};" casesensitive="yes" />
      </fileset>
      <echo message="Refactor @{package}.@{class} -&gt; removed" />
      <replaceregexp byline="true">
        <fileset refid="@{class}.files" />
        <regexp pattern="^import @{class}\.@{class};$" />
        <substitution expression="// import @{class}.@{class};@{removed}" />
      </replaceregexp>
      <replace dir="${project.dir}" includes="**/*.java" summary="yes">
        <replacefilter>
          <replacetoken>(\s)@{package1}@{class1}(\W)</replacetoken>
          <replacevalue>\1@{package2}@{class2}\2</replacevalue>
        </replacefilter>
      </replace>
    </sequential>
  </macrodef>
  <target name="starting-up" description="Update project in current directory to remove org.opengis package use">
    <echo>Update to GeoTools 30.x series</echo>
    <echo />
    <echo>UPDATE STARTING: ${project.dir}</echo>
  </target>
  <target name="_filterFactory" description="FilterFactory2 and FilterFactory merge">
    <echo />
    <echo message="Files containing org.opengis.filter.FilterFactory2:" />
    <fileset id="FilterFactory2.files" dir="${project.dir}" includes="**/*.java">
      <contains text="org.opengis.filter.FilterFactory2" casesensitive="yes" />
    </fileset>
    <echo message="Refactor FilterFactory2 --&gt; FilerFactory" />
    <replaceregexp byline="true" flags="g">
      <regexp pattern="(\W)FilterFactory2(\W)" />
      <substitution expression="\1FilterFactory\2" />
      <fileset refid="FilterFactory2.files" />
    </replaceregexp>
    <echo message="CommonFactoryFinder.getFilterFactory()" />
    <replace dir="${project.dir}" includes="**/*.java" summary="yes">
      <replacefilter>
        <replacetoken>.getFilterFactory2(</replacetoken>
        <replacevalue>.getFilterFactory(</replacevalue>
      </replacefilter>
    </replace>
    <echo message="Files containing org.opengis.filter.FilterFactory:" />
    <fileset id="filterFactory.files" dir="${project.dir}" includes="**/*.java">
      <contains text="import org.opengis.filter.FilterFactory;" casesensitive="yes" />
    </fileset>
    <echo>FilterFactory.property(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.property\(null\)" />
      <substitution expression=".property((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.beyond(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.beyond\(null\)" />
      <substitution expression=".beyond((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.contains(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.contains\(null\)" />
      <substitution expression=".contains((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo level="warning">check: Collecions.contains((String) null) use for possible conflicts</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.crosses\(null\)" />
      <substitution expression=".crosses((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.disjoint(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.disjoint\(null\)" />
      <substitution expression=".disjoint((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.intersects(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.intersects\(null\)" />
      <substitution expression=".intersects((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.overlaps(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.overlaps\(null\)" />
      <substitution expression=".overlaps((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.equals(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.equals\(null\)" />
      <substitution expression=".equals((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo level="warning">check: Object.equals((String) null) use for possible conflict</echo>
    <echo>FilterFactory.dwithin(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.dwithin\(null\)" />
      <substitution expression=".dwithin((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.touches(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.touches\(null\)" />
      <substitution expression=".touches((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.overlaps(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.overlaps\(null\)" />
      <substitution expression=".overlaps((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.touches(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.touches\(null\)" />
      <substitution expression=".touches((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
    <echo>FilterFactory.within(null)</echo>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.within\(null\)" />
      <substitution expression=".within((String) null)" />
      <fileset refid="filterFactory.files" />
    </replaceregexp>
  </target>
  <target name="_styleFactory" description="StyleFactory2 and StyleFactory merge">
    <echo />
    <echo message="Files containing org.geotools.styling.StyleFactory2:" />
    <fileset id="StyleFactory2.files" dir="${project.dir}" includes="**/*.java">
      <contains text="org.geotools.styling.StyleFactory2" casesensitive="yes" />
    </fileset>
    <echo message="Refactor StyleFactory2 --&gt; StyleFactory" />
    <replaceregexp byline="true" flags="g">
      <regexp pattern="(\W)StyleFactory2(\W)" />
      <substitution expression="\1StyleFactory\2" />
      <fileset refid="StyleFactory2.files" />
    </replaceregexp>
    <echo message="CommonFactoryFinder.getStyleFactory()" />
    <replace dir="${project.dir}" includes="**/*.java" summary="yes">
      <replacefilter>
        <replacetoken>.getStyleFactory2(</replacetoken>
        <replacevalue>.getStyleFactory(</replacevalue>
      </replacefilter>
    </replace>
    <fileset id="StyleFactory.files" dir="${project.dir}" includes="**/*.java">
      <contains text="org.geotools.styling.StyleFactory" casesensitive="yes" />
    </fileset>
    <echo message="org.geotools.styling.StyleFactory to org.geotools.api.style.StyleFactory" />
    <replace dir="${project.dir}" includes="**/*.java" summary="yes">
      <replacefilter>
        <replacetoken>org.geotools.styling.StyleFactory</replacetoken>
        <replacevalue>org.geotools.api.style.StyleFactory</replacevalue>
      </replacefilter>
    </replace>
  </target>
  <target name="_styling" description="Fix renaming of org.geotools.styling.* interfaces to org.geotools.api.style">
    <fileset id="style.files" dir="${project.dir}" includes="**/*.java">
      <contains text="org.geotools.styling" casesensitive="yes" />
    </fileset>
    <echo />
    <echo message="fixing style interface locations"/>
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.geotools\.styling\.(.*)" />
      <substitution expression=".geotools.api.style.\1" />
      <fileset dir="${project.dir}">
        <include name="**/*.java"/>
      </fileset>

    </replaceregexp> 

    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.geotools\.api\.style\.(Abstract.*)" />
      <substitution expression=".geotools.styling.\1" />
      <fileset dir="${project.dir}">
        <include name="**/*.java"/>
      </fileset>
    </replaceregexp> 
    <replaceregexp byline="true" flags="g">
      <regexp pattern="\.geotools\.api\.style\.DefaultResourceLocator" />
      <substitution expression=".geotools.styling.DefaultResourceLocator" />
      <fileset dir="${project.dir}" includes="**/*.java">
        <contains text="DefaultResourceLocator" casesensitive="yes" />
      </fileset>
    </replaceregexp> 
    <replaceregexp byline="true" flags="g">
      <regexp pattern="= (.*).getInlineFeatureDatastore\(\)" />
      <substitution expression="= (DataStore)\1.getInlineFeatureDatastore()" />
      <fileset dir="${project.dir}" includes="**/*.java">
        <contains text="getInlineFeatureDatastore" casesensitive="yes" />
      </fileset>
    </replaceregexp> 
  </target>
  <!-- the following tasks run after _opengis above to reflect api refactoring -->
  <target name="_bounds" description="Bounds and Position API cleanup">
    <echo />
    <echo message="Refactor Position to DirectPosition" />
    <echo message="and removing org.opengis.geometry.coordinates.Position)" />
    <!-- you cann use refid="Position.files" fileset after refactor -->
    <refactor package1="org.opengis.geometry.coordinate" class1="Position" package2="org.opengis.geometry" class2="DirectPosition" />
    <remove package="org.opengis.geometry.coordinate" class="PointArray" removed="// removed - use List&lt;DirectPosition&gt;" />
  </target>
  <target name="_opengis" description="Package change from org.opengis classes to org.geotools.api">
    <echo />
    <echo message="Refactor org.opengis to org.geotools.api" />
    <!-- bulk replace * imports, may require more than one * import -->
    <replace dir="${project.dir}" includes="**/*.java" summary="yes">
      <replacefilter>
        <replacetoken>org.opengis.</replacetoken>
        <replacevalue>org.geotools.api.</replacevalue>
      </replacefilter>
    </replace>
    <!-- Service INF -->
    <move todir="." verbose="true">
      <fileset dir=".">
        <include name="**/META-INF/services/org.opengis.*" />
        <exclude name="**/target/*" />
      </fileset>
      <regexpmapper from="(.*)/org.opengis.(.*)" to="\1/org.geotools.api.\2" />
    </move>
  </target>
  <target name="update" depends="starting-up,_filterFactory,_styleFactory,_styling,_bounds,_opengis" description="Update project in current directory to remove org.opengis package use">
    <echo>UPDATE COMPLETED: ${project.dir}</echo>
    <echo />
    <echo>At the request of OGC https://www.ogc.org/standard/geoapi/ standard</echo>
    <echo>Your project has been refactored to change org.opengis to org.geotools.api</echo>
    <echo />
    <echo>You may have unsued imports to clean up, but we believe your project will compile!</echo>
  </target>
</project>
