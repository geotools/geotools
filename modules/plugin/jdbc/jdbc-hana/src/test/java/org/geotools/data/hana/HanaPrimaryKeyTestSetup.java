/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 *
 *    (C) 2018, Open Source Geospatial Foundation (OSGeo)
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.geotools.data.hana;

import java.sql.Connection;
import org.geotools.jdbc.JDBCPrimaryKeyTestSetup;
import org.geotools.jdbc.JDBCTestSetup;

/** @author Stefan Uhrig, SAP SE */
public class HanaPrimaryKeyTestSetup extends JDBCPrimaryKeyTestSetup {

    private static final String AUTO_TABLE = "auto";

    private static final String MULTI_TABLE = "multi";

    private static final String NONINC_TABLE = "noninc";

    private static final String SEQ_TABLE = "seq";

    private static final String NONFIRST_TABLE = "nonfirst";

    private static final String UNIQ_TABLE = "uniq";

    private static final String NOKEY_TABLE = "nokey";

    public HanaPrimaryKeyTestSetup(JDBCTestSetup delegate) {
        super(delegate);
    }

    @Override
    protected void createAutoGeneratedPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"key", "INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY"},
                {"name", "VARCHAR(255)"},
                {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createTable(null, AUTO_TABLE, cols);

            htu.insertFieldsIntoTable(null, AUTO_TABLE, "name", "geom", "one", null);
            htu.insertFieldsIntoTable(null, AUTO_TABLE, "name", "geom", "two", null);
            htu.insertFieldsIntoTable(null, AUTO_TABLE, "name", "geom", "three", null);
        }
    }

    @Override
    protected void createMultiColumnPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"key1", "INT NOT NULL"},
                {"key2", "VARCHAR(255) NOT NULL"},
                {"name", "VARCHAR(255)"},
                {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createTable(null, MULTI_TABLE, cols);
            htu.addPrimaryKey(null, MULTI_TABLE, "key1", "key2");

            htu.insertIntoTable(null, MULTI_TABLE, 1, "x", "one", null);
            htu.insertIntoTable(null, MULTI_TABLE, 2, "y", "two", null);
            htu.insertIntoTable(null, MULTI_TABLE, 3, "z", "three", null);
        }
    }

    @Override
    protected void createNonIncrementingPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"key", "INT PRIMARY KEY"},
                {"name", "VARCHAR(255)"},
                {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createTable(null, NONINC_TABLE, cols);

            htu.insertIntoTable(null, NONINC_TABLE, 1, "one", null);
            htu.insertIntoTable(null, NONINC_TABLE, 2, "two", null);
            htu.insertIntoTable(null, NONINC_TABLE, 3, "three", null);
        }
    }

    @Override
    protected void createSequencedPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"key", "INT PRIMARY KEY"},
                {"name", "VARCHAR(255)"},
                {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createRegisteredTable(null, SEQ_TABLE, cols);

            htu.skipSequenceValueFor(null, SEQ_TABLE, "key");
            htu.insertIntoTable(
                    null,
                    SEQ_TABLE,
                    htu.nextSequenceValueForColumn(null, SEQ_TABLE, "key"),
                    "one",
                    null);
            htu.insertIntoTable(
                    null,
                    SEQ_TABLE,
                    htu.nextSequenceValueForColumn(null, SEQ_TABLE, "key"),
                    "two",
                    null);
            htu.insertIntoTable(
                    null,
                    SEQ_TABLE,
                    htu.nextSequenceValueForColumn(null, SEQ_TABLE, "key"),
                    "three",
                    null);
        }
    }

    @Override
    protected void createNullPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {{"name", "VARCHAR(255)"}};
            htu.createTable(null, NOKEY_TABLE, cols);

            htu.insertIntoTable(null, NOKEY_TABLE, "one");
            htu.insertIntoTable(null, NOKEY_TABLE, "two");
            htu.insertIntoTable(null, NOKEY_TABLE, "three");
        }
    }

    @Override
    protected void createUniqueIndexTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"key", "INT"}, {"name", "VARCHAR(255)"}, {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createTable(null, UNIQ_TABLE, cols);

            htu.addUniqueIndex(null, UNIQ_TABLE, "uniq_key_index", "key");
            htu.insertIntoTable(null, UNIQ_TABLE, 1, "one", null);
            htu.insertIntoTable(null, UNIQ_TABLE, 2, "two", null);
            htu.insertIntoTable(null, UNIQ_TABLE, 3, "three", null);
        }
    }

    @Override
    protected void createNonFirstColumnPrimaryKey() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);

            String[][] cols = {
                {"name", "VARCHAR(255)"},
                {"key", "INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY"},
                {"geom", "ST_Geometry(1000004326)"}
            };
            htu.createTable(null, NONFIRST_TABLE, cols);

            htu.insertFieldsIntoTable(null, NONFIRST_TABLE, "name", "geom", "one", null);
            htu.insertFieldsIntoTable(null, NONFIRST_TABLE, "name", "geom", "two", null);
            htu.insertFieldsIntoTable(null, NONFIRST_TABLE, "name", "geom", "three", null);
        }
    }

    @Override
    protected void dropAutoGeneratedPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, AUTO_TABLE);
        }
    }

    @Override
    protected void dropMultiColumnPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, MULTI_TABLE);
        }
    }

    @Override
    protected void dropNonIncrementingPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, NONINC_TABLE);
        }
    }

    @Override
    protected void dropSequencedPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropSequence(null, "SEQ_KEY_SEQUENCE");
            htu.dropTableCascade(null, SEQ_TABLE);
        }
    }

    @Override
    protected void dropNullPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, NOKEY_TABLE);
        }
    }

    @Override
    protected void dropUniqueIndexTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, UNIQ_TABLE);
        }
    }

    @Override
    protected void dropNonFirstPrimaryKeyTable() throws Exception {
        try (Connection conn = getConnection()) {
            HanaTestUtil htu = new HanaTestUtil(conn);
            htu.dropTableCascade(null, NONFIRST_TABLE);
        }
    }
}
