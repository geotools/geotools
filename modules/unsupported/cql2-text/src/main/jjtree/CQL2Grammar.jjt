
 
options {
   STATIC=false;
   NODE_SCOPE_HOOK=true;
   NODE_DEFAULT_VOID=true;
   MULTI=false;
   BUILD_NODE_FILES=false; // Generates sample implementations for SimpleNode and any other nodes used in the grammar   	

   NODE_PACKAGE="org.geotools.filter.text.cql_2.parsers";
 
   SANITY_CHECK=true;
   VISITOR=false;
   
   FORCE_LA_CHECK=false; // force lookahead ambiguity checking in such instances. This option don't take into account the local lookahead

   UNICODE_INPUT = true;
   JAVA_UNICODE_ESCAPE = true;

   	// debug
   DEBUG_TOKEN_MANAGER=false;
   DEBUG_PARSER=false;
   DEBUG_LOOKAHEAD=false;
}

PARSER_BEGIN(CQL2Parser)

package org.geotools.filter.text.cql_2.parsers;
        
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;



/**
 * CQL2Parser is the result of a javacc jjtree grammar.
 * 
 * @author  Mauricio Pazos - Axios Engineering
 * @author  Andrea Aime - GeoSolutions
 * @since 2.26
 */
public class CQL2Parser {
  private static final Logger LOGGER = Logger.getLogger(CQL2Parser.class.getName());
  
  public void jjtreeOpenNodeScope(Node n) throws ParseException {
 
  }

  public void jjtreeCloseNodeScope(Node n) throws ParseException {

  }

  // initialize geooperations
  protected static final Set GEOOP = new HashSet();
  static {
		GEOOP.add("S_EQUALS");
		GEOOP.add("S_DISJOINT");
		GEOOP.add("S_INTERSECTS");
		GEOOP.add("S_TOUCHES");
		GEOOP.add("S_CROSSES");
		GEOOP.add("S_WITHIN");
		GEOOP.add("S_CONTAINS");
		GEOOP.add("S_OVERLAPS");
  }
  protected boolean isGeoOp() {
  
        return "(".equals(getToken(2).image)
            && GEOOP.contains(getToken(1).image.toUpperCase());
  }
    
  
}

PARSER_END(CQL2Parser)


SKIP : /* WHITE SPACE */
{
  		" "
	| 	"\t"
	| 	"\n"
	| 	"\r"
	| 	"\f"
}


/*
 * <character string literal>
 */
TOKEN:
{
	  < STRING_LITERAL: "'" ( "''" | ~["'"] )* "'" > : DEFAULT
}

/*
 * keywords
 */
TOKEN [IGNORE_CASE]:  /* keywords */
{
   < AND: "and"> |
   < OR: "or"> |
   < NOT: "not" > |
   < EQ: "="> |
   < NEQ: "<>" > |
   < GT: ">" > |
   < LT: "<" > |
   < GTE: ">="> |
   < LTE: "<="> |
   < TRUE: "true"> |
   < FALSE: "false"> |
   < UNKNOWN: "unknown"> |
   < LIKE: "like" > |
   < BETWEEN: "between"> |
   < IN: "in" > |
   < IS: "is" > |
   < NULL: "null" > |
   < DATEFUNC: "DATE" > |
   < TIMESTAMPFUNC: "TIMESTAMP" > |
   < PERIODFUNC: "PERIOD" >
}

TOKEN [IGNORE_CASE]: /* geometry markers */
{
  < POINT: "point"> |
  < LINESTRING: "linestring"> |
  < POLYGON: "polygon"> |
  < MULTIPOINT: "multipoint"> |
  < MULTILINESTRING: "multilinestring"> |
  < MULTIPOLYGON: "multipolygon"> |
  < GEOMETRYCOLLECTION: "geometrycollection"> |
  < ENVELOPE: "envelope"> 
}

TOKEN [IGNORE_CASE]: /* temporal expression*/
{
	<TEQUALS: "t_equals">  | 
	<BEFORE: "t_before">   | 
	<DURING: "t_during">   |
	<AFTER:  "t_after">    |
	<UTC: "T">             |
	<INTERVAL: "interval"> |
	<DATE_OPEN: "'..'">
}

TOKEN [IGNORE_CASE]:  
{
  < EQUALS: "s_equals"> |
  < DISJOINT: "s_disjoint"> |
  < INTERSECTS: "s_intersects"> |
  < TOUCHES: "s_touches"> |
  < CROSSES: "s_crosses"> |
  < WITHIN: "s_within"> |
  < CONTAINS: "s_contains"> |
  < OVERLAPS: "s_overlaps"> 
}

TOKEN:
{
  < LP: "("> |
  < RP: ")"> |
  < LSP: "["> |
  < RSP: "]"> |
  < COMMA: ","> |
  < SENTENCE_SEPARATOR: ";"> |
  < PERIOD: "."> |
  < SLASH: "/"> |
  < COLON: ":">	|
  < MULT: "*"> |
  < PLUS: "+"> |
  < MINUS: "-" > |
  < QUOTE: "'"> |
  < DOUBLE_QUOTE: "\""> |
  < DOLLAR: "$">
}


// Note, because float and int can technically have the same grammar,
// put int first to make token manager have preference for it...
// The same case occurs between identifier and duration tokens, 
// then DURATION has preference over IDENTIFIER
TOKEN [IGNORE_CASE]: /* Literals */
{

  	< INTEGER_LITERAL: (<DIGIT>)+ > |
  	< FLOATING_LITERAL:
    	( ( <DIGIT> )* "." ( <DIGIT> )+ (<EXPONENT>)? ) |
    	( ( <DIGIT> )+ ("." ( <DIGIT> )*)? (<EXPONENT>)? )
  	> |

	< #DUR_DAY:	  (<DIGIT>)+ "D" > |
	< #DUR_MONTH: (<DIGIT>)+ "M" (<DUR_DAY>)? > |
	< #DUR_YEAR:  (<DIGIT>)+ "Y" (<DUR_MONTH>)? > |	
	< #DUR_DATE:  (<DUR_DAY> | <DUR_MONTH> | <DUR_YEAR>) ("T" <DUR_TIME>)?> | 

	< #DUR_HOUR:  (<DIGIT>)+ "H" (<DUR_MINUTE>)?> |
	< #DUR_MINUTE:(<DIGIT>)+ "M" (<DUR_SECOND>)? > |
	< #DUR_SECOND:(<DIGIT>)+ "S" > |	
	< #DUR_TIME:  (<DUR_HOUR> | <DUR_MINUTE> | <DUR_SECOND>) > | 
	
	< DURATION:  ("P" <DUR_DATE> |  "T" <DUR_TIME>) > |
	
	< #FULL_DATE: <DIGIT><DIGIT><DIGIT><DIGIT> "-" <DIGIT><DIGIT> "-" <DIGIT><DIGIT> > |
    < #TIME_ZONE: ("Z") | (("+"|"-") <DIGIT><DIGIT> (":")? <DIGIT><DIGIT>) > | 
    < #UTC_TIME: <DIGIT><DIGIT> ":" <DIGIT><DIGIT> ":" <DIGIT><DIGIT> ("." (<DIGIT>)+)? (<TIME_ZONE>) > |
	< DATE : <DATEFUNC> <LP> <QUOTE> <FULL_DATE>(<TIME_ZONE>)? <QUOTE> <RP> > |
	< DATE_TIME : <TIMESTAMPFUNC> <LP> <QUOTE> <FULL_DATE>"T"<UTC_TIME> <QUOTE> <RP> > |

    < IDENTIFIER: (<LETTER> (<LETTER>|<DIGIT>|<DOLLAR>)*) | <DOUBLE_QUOTE> (<ANY>)+ <DOUBLE_QUOTE> > |

	< #ANY: ~[" ","\""] > |
  	< #LETTER: [ "a"-"z", "A"-"Z" , "_"] > |
  	< #DIGIT: [ "0"-"9"] > |
  	< #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ > |
  	
    < #DIMENSION_SYMBOL: "*"| "T" | "F" | "0" | "1" | "2"> |
    < DE9IM_PATTERN: (<DIMENSION_SYMBOL>){9} >
}



/*
 * Program structuring syntax to parse a single filter.
 */
Node FilterCompilationUnit() :
{}
{
   SearchCondition()
   <EOF>
   {return jjtree.rootNode();}
}

/*
 * Program structuring syntax to parse a single expression.
 */
Node ExpressionCompilationUnit() :
{}
{
    CQL2Expression()
   <EOF>
   {return jjtree.rootNode();}
}

void CQL2Expression()#void:
{}
{
    	Expression()
}

/*
 * Program structuring syntax to parse a list of filters.
 */
Node FilterListCompilationUnit() :
{}
{
   SequenceOfSearchConditions()
   <EOF>
   {return jjtree.rootNode();}
}


/*
 * <SequenceOfSearchConditions> ::= 
 * 			<search condition>
 * 		|	<SequenceOfSearchConditions> ; <search condition>
 */ 
void SequenceOfSearchConditions() #void:
{}
{
		SearchCondition() (<SENTENCE_SEPARATOR> SearchCondition())*
}

void SearchCondition() #void:
{}
{
	 BooleanValueExpression()
}

/*
 * <boolean value expression> ::= 
 *			<boolean term>
 * 		| 	<boolean value expression> OR <boolean term>
 */
void BooleanValueExpression() #void:
{}
{
		BooleanTerm()( <OR> BooleanTerm() #Boolean_Or_Node )*
}

/*
 * <boolean term> ::= 
 *            <boolean factor>
 *          | <boolean term> AND <boolean factor>
 */
void BooleanTerm() #void :
{}
{
	 BooleanFactor()( <AND> BooleanFactor() #Boolean_And_Node )*
}


void BooleanFactor() #void:
{}
{
	  <NOT> BooleanPrimary() #Boolean_Not_Node
	| BooleanPrimary()

}

void BooleanPrimary() #void:
{}
{
	   LOOKAHEAD(Predicate()) Predicate() 
	|  <LP>SearchCondition()<RP> 
	|  RoutineInvocation() 
}

/*
 * <predicate> ::= <comparison predicate>
 * 	| <text predicate>
 * 	| <null predicate>
 * 	| <temporal predicate>
 * 	| <classification predicate> (*not supported*)
 * 	| <between predicate> (*extension*)
 *  | <id predicate>
 */
void Predicate() #void:
{}
{
        LOOKAHEAD(InPredicate()) InPredicate()
    |   LOOKAHEAD(TemporalPredicate()) TemporalPredicate() 
    |   Expression()  
        (
                LOOKAHEAD(2) likePredicate()
            |   LOOKAHEAD(2) NullPredicate() 
            |   LOOKAHEAD(2) BetweenPredicate()     
            |   ComparisonPredicate()
        )
        
}

/* ---------------------------------------- *
 *   	<in predicate>
 * ---------------------------------------- *
/*
/* <in predicate>    	::=   <attribute-name> [  "NOT"  ]  "IN"  <in predicate value>
 * <in predicate value>    ::=   "(" <in value list> ")"
 * <in value list>         ::=   <expression> {"," <expression>} 
 */
void InPredicate() #void:
{}
{
        LOOKAHEAD(3)    Attribute() <NOT> <IN> InPredicateList()    #Not_In_Predicate_Node
    |   LOOKAHEAD(2)    Attribute()       <IN> InPredicateList()    #In_Predicate_Node
    |                   Function()        <IN> InPredicateList()    #In_Predicate_Node
}


void InPredicateList() #void:
{}
{
	<LP> ExpressionInList()( <COMMA>  ExpressionInList() )* <RP>	
} 

void ExpressionInList() #Expression_In_List_Node:
{}
{
	Expression()
}


/* ---------------------------------------- *
 *   	<routine invocation>
 * ---------------------------------------- *
/*
 * <routine invocation> ::= 
 *	 <geoop name><georoutine argument list>
 * | <routine name><argument list>
 */
void RoutineInvocation() #void:
{}
{
		LOOKAHEAD({ isGeoOp() })   		RoutineInvocationGeoOp()
	|	RoutineInvocationGeneric()
}

void RoutineInvocationGeoOp() #void:
{}
{
  	<EQUALS> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Equal_Node
  |	<DISJOINT> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Disjoint_Node
  |	<INTERSECTS> GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Intersect_Node
  |	<TOUCHES> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Touch_Node
  |	<CROSSES> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Cross_Node
  |	<WITHIN> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Within_Node
  |	<CONTAINS> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Contain_Node
  |	<OVERLAPS> 	GeoRoutineArgumentList() #RoutineInvocation_GeoOp_Overlap_Node 
}

/*
 * <georoutine argument list> ::=
 *		<left paren><Expression><comma><Expression><right paren>
 *
 */
void GeoRoutineArgumentList() #void:
{}
{
	<LP> Expression() <COMMA> Expression() <RP>
}

/*
 * <geometry literal> ::= 
 *   <Point Tagged Text>
 * | <LineString Tagged Text>
 * | <Polygon Tagged Text>
 * | <MultiPoint Tagged Text>
 * | <MultiLineString Tagged Text>
 * | <MultiPolygon Tagged Text>
 * | <GeometryCollection Tagged Text>
 * | <Envelope Tagged Text>
 */
void GeometryLiteral() #GeometryLiteral:
{}
{
  PointTaggedText() |
  LineStringTaggedText() |
  PolygonTaggedText() |
  MultiPointTaggedText() |
  MultiLineStringTaggedText() |
  MultiPolygonTaggedText() |
  GeometryCollectionTaggedText() |
  EnvelopeTaggedText()
}
/*
 *  <routine invocation > ::= 
 *  |   <routine name > <argument list > 
 *                                           
 * <argument list&gt ::=    
 *      <left paren> [<positional arguments>] <right paren>
 * <positional arguments> ::=
 *      <argument> [ { <comma&gt <argument> }... ]
 *           
 * <argument>  ::= 
 *      <literal>  
 *  |   <attribute name>                                            
 *  |   <function>           (*Extension*)                                            
 *  |   <binary expression>  (*Extension*)                            
 */
void RoutineInvocationGeneric() #void:
{}
{
	Function()
}

/* ---------------------------------------- *
 *   	End <routine invocation>
 * ---------------------------------------- *


/* ---------------------------------------- *
 *   	<comparison predicate>
 * ---------------------------------------- *
/*
 * <comparison predicate> ::= 
 *		  <attribute name> <comp op> <literal>
 */
void ComparisonPredicate() :
{}
{
     <EQ> 	Expression() #ComparisonPredicate_EQ_Node
   | <GT> 	Expression() #ComparisonPredicate_GT_Node
   | <LT> 	Expression() #ComparisonPredicate_LT_Node
   | <GTE> 	Expression() #ComparisonPredicate_GTE_Node
   | <LTE>	Expression() #ComparisonPredicate_LTE_Node
   | <NEQ> 	Expression() #ComparisonPredicate_Not_Equal_Node
}

/*
 * <null predicate> ::= <attribute name> IS [ NOT ] NULL 
 */
void NullPredicate() :
{}
{
	  LOOKAHEAD(3) 	<IS> <NULL> 		#NullPredicateNode
	|  				<IS> <NOT> <NULL> 	#NotNullPredicateNode
}


/* ---------------------------------------- *
 *   	<temporal predicate>
 * ---------------------------------------- */
void TemporalPredicate() #void:
{}
{
         <TEQUALS> <LP> TemporalExpression() <COMMA> TemporalExpression() <RP> #TPTEQUALS_DateTime_Node
    |    <AFTER> <LP> TemporalExpression() <COMMA> TemporalExpression() <RP> #TPaFTER_DateTime_Node
    |    <BEFORE> <LP> TemporalExpression() <COMMA> TemporalExpression() <RP> #TPBefore_DateTime_Node
    |    <DURING> <LP> TemporalExpression() <COMMA> TemporalExpression() <RP> #TPDuring_Period_Node
}

void TemporalExpressionInterval() #void:
{}
{
       Interval()
    |  LOOKAHEAD(2) Function()   
    |  Attribute()    
}

void TemporalExpression() #void:
{}
{
        Interval()
   |    LOOKAHEAD(2) Function()     
   |    Attribute()
   |    DateLiteral()        
}

/*
 *<interval> ::= 
 *	  <date-time> "/" <date-time>
 */
void Interval() #Interval:
{}
{
		<INTERVAL> <LP> InstantParameter() <COMMA> InstantParameter() <RP>
}

/**
 * Simplified so that we only handle literals for the moment, to be udpated
 * once discussion at https://github.com/opengeospatial/ogcapi-features/issues/674
 * ends
 */
void InstantParameter() #void:
{}
{
        DateLiteral() 
   |    <DATE_OPEN>  #DateOpen
}

/* ---------------------------------------- *
 *  End <temporal predicate>
 * ---------------------------------------- */

void likePredicate() #void:
{}
{
  	 	LOOKAHEAD(2)  <NOT> <LIKE> CharacterPattern() 	#Not_Like_Node
  	|	              <LIKE> CharacterPattern() 		#Like_Node
}

void CharacterPattern() #void:
{}
{
  	StringLiteral() 
}

/*
 * Cql Extension
 * 
 *	<beween predicate>::= ["NOT"] "BETWEEN" expression "AND" expression
 */
void BetweenPredicate() #void:
{}
{
	LOOKAHEAD(2) <NOT> <BETWEEN> Expression() <AND> Expression()	#Not_Between_Node
  	|			 <BETWEEN> Expression() <AND> Expression()			#Between_Node
}

/*
 * cql extension
 *	<expression> ::= 
 */
void Expression() #void:
{}
{
   		BinaryExpression()
   	|  	GeometryLiteral()
}

void BinaryExpression() #void:
{}
{
  MultiplicativeExpression()
  (
    <PLUS> MultiplicativeExpression() #AddNode
   |
    <MINUS> MultiplicativeExpression() #SubtractNode
  )*
}
 


void MultiplicativeExpression() #void :
{}
{
  
  UnaryExpression()
  (
    <MULT> UnaryExpression() #MulNode
   |
    <SLASH> UnaryExpression() #DivNode
  )*
}

void UnaryExpression() #void:
{}
{
	  LOOKAHEAD(2)<LP> Expression()<RP>
	| LOOKAHEAD(2) Function() 
	| Literal()
	| Attribute()
}

void Evaluate() #void:
{}
{
  	LOOKAHEAD(2) Function() 
  |	Attribute()
}

/*
 * <identifier> ::= <identifier part [ { <colon> | <identifier part> }... ]
 */
void Identifier() #Identifier_Node:
{}
{
	IdentifierPart() ( <COLON> | IdentifierPart() )*	
}
void IdentifierPart() #Identifier_Part_Node:
 {}
 {
	<IDENTIFIER>
 }
 
   
/*
 * <attribute name> ::= 
 *  	  <simple attribute name> 
 * 		| <compound attribute name>
 * 
 * <compound attribute name> ::= 
 * 		<identifier><period> [{<identifier><period>}*] <simple attribute name>
 *
 * <simple attribute name> ::= <identifier>
 */ 
void Attribute() #void:
{}
{
	 	SimpleAttributeName() AttributeTail() 
}

/*
 * <simple attribute name> ::= <identifier>
 */
void SimpleAttributeName() #Simple_Attribute_Node:
{}
{
	Identifier()	
}

void AttributeTail() #Compound_Attribute_Node:
{}
{
 	 (  <PERIOD> SimpleAttributeName() )* 
}

/*
 * <literal> ::= 
 *			<signed numeric literal>
 * 		| 	<general literal>
 */
void Literal() #void :
{}
{
		DateLiteral()
	|  	NumericLiteral()
	| 	GeneralLiteral()	
}

void DateLiteral() #void :
{}
{
    <DATE> #Date_Node
    | <DATE_TIME> #DateTime_Node
}

void NumericLiteral() #void :
{}
{
		(("-") UnsignedNumericLiteral())  #NegativeNumber_Node 
	| 	UnsignedNumericLiteral() 

}
void UnsignedNumericLiteral() #void :
{}
{
		IntegerLiteral() 
  	| 	FloatingLiteral() 
}

/*
 *<general literal> ::= 
 * 			<character string literal>
 * 		| 	<datetime literal>
 * 		| 	<boolean literal>
 * 		| 	<geography literal
 */   
void GeneralLiteral() #void:
{}
{
  	StringLiteral()
  |	BooleanLiteral() 
//  | GeographyLiteral()  TODO
}



void IntegerLiteral() #IntegerNode:
{}
{
  <INTEGER_LITERAL>
}

void FloatingLiteral() #FloatingNode:
{}
{
  <FLOATING_LITERAL>
}

void BooleanLiteral() #void :
{}
{
  <TRUE> #TrueNode |
  <FALSE> #FalseNode
}

void StringLiteral() #StringNode :
{}
{
    <STRING_LITERAL> 
}

/* ---------------------------------------- *
 *  <function>
 * ---------------------------------------- */
/*
 * <function> ::= <identifier> "("<function arg> [,<function arg>]*)
 */
void Function() #Function_Node:
{}
{
  		 FunctionName()
  			<LP>( FunctionArg() (<COMMA> FunctionArg() )* )? <RP>
}


void FunctionName() #FunctionName_Node:
{}
{
    <IDENTIFIER>
}

/*
 * <argument>  ::= 
 *      <literal>  
 *  |   <attribute name>                                            
 * 	|	<expression> (*extension: expresion inclue literal and attributes*) 
 */
void FunctionArg() #FunctionArg_Node:
{}
{
		Expression()
}
/* ---------------------------------------- *
 *  end <function>
 * ---------------------------------------- */

/*
 * <Point> := <x><space><y>
 */
void Point() #Point_Node:
{}
{
  NumericLiteral() NumericLiteral()
}

/*
 * <LineString Text> := EMPTY
 * | <left paren><Point>{<comma><Point >} ... <right paren>
 */
void LineStringText() #LineStringText_Node:
{}
{
  (<LP> Point() ( <COMMA> Point() )* <RP>)?
}

void PointTaggedText() #WKTNode:
{} 
{
   <POINT> PointText()
}
/*
 * <Point Text> := EMPTY | <left paren> <Point> <right paren>
 */
void PointText() #PointText_Node:
{}
{
	(<LP> Point() <RP>)?
}

void LineStringTaggedText() #WKTNode:
{}
{
   <LINESTRING> LineStringText() 
}
/*
 * <Polygon Tagged Text> := POLYGON <Polygon Text>
 */
void PolygonTaggedText() #WKTNode:
{}
{
  <POLYGON> PolygonText()
}


/*
 * <Polygon Text> := EMPTY
 *  	| <left paren><LineString Text>{<comma><LineString Text>}*<right paren>
 */
void PolygonText()#PolygonText_Node:
{}
{
	(<LP> LineStringText() (<COMMA> LineStringText())* <RP>)?
}

/*
 * <MultiPoint Tagged Text> ::= MULTIPOINT <Multipoint Text>
 */
void MultiPointTaggedText() #WKTNode:
{}
{
  <MULTIPOINT> MultiPointText()
}
/*
 * <Multipoint Text> := EMPTY
 * 	| ( <Point Text > {, <Point Text > }* )
 */
void MultiPointText() #MultiPointText_Node:
{}
{
 	(<LP> PointText() (<COMMA> PointText() )* <RP>)?
}

/*
 * <MultiLineString Tagged Text> := MULTILINESTRING <MultiLineString Text>
 */
void MultiLineStringTaggedText() #WKTNode:
{}
{
  <MULTILINESTRING> MultiLineStringText()
}
/*
 * <MultiLineString Text> := 
 *		EMPTY
 * 		| ( <LineString Text > {, < LineString Text > }* )
 */
void MultiLineStringText() #MultiLineStringText_Node:
{}
{
	( <LP> LineStringText() (<COMMA> LineStringText())* <RP> )?
}
/*
 * <MultiPolygon Tagged Text> :: =MULTIPOLYGON <MultiPolygon Text>
 */
void MultiPolygonTaggedText() #WKTNode:
{}
{
  <MULTIPOLYGON> MultiPolygonText()
}
/*
 * <MultiPolygon Text> := EMPTY
 * 	| <left paren><Polygon Text>{<comma><Polygon Text>}* <right paren>
 */
void MultiPolygonText() #MultiPolygonText_Node:
{}
{
	( <LP> PolygonText() ( <COMMA> PolygonText() )* <RP> )?
}

void GeometryCollectionTaggedText() #WKTNode:
{}
{
  <GEOMETRYCOLLECTION> GeometryCollectionText()
}

/*
 * <GeometryCollection Text> := EMPTY
 * | ( <Geometry Tagged Text> {, <Geometry Tagged Text> }* )
 */
 void GeometryCollectionText() #GeometryCollectionText_Node:
 {}
 {
 	( <LP> GeometryLiteral() ( <COMMA> GeometryLiteral() )* <RP>)?
 }
 
/*
 * <Envelope Tagged Text> ::= ENVELOPE <Envelope Text>
 */
 void EnvelopeTaggedText() #EnvelopeTaggedText_Node:
 {}
 {
 	jjtThis.token = <ENVELOPE> EnvelopText()
 }

/*
 * <Envelope Text> := EMPTY
 * | <left paren>
 *		<WestBoundLongitude><comma>
 *   	<SouthBoundLatitude><comma>
 *   	<EastBoundLongitude><comma>
 *   	<NorthBoundLatitude>
 *	<right paren>
 * <WestBoundLongitude> := numeric literal
 * <SouthBoundLatitude> := numeric literal
 * <EastBoundLongitude> := numeric literal
 * <NorthBoundLatitude> := numeric literal
 */
 void EnvelopText() #void:
 {}
 {
 	( <LP> 
 		NumericLiteral() <COMMA>
 		NumericLiteral() <COMMA>
 		NumericLiteral() <COMMA>
 		NumericLiteral() 
 	 <RP> )?
 }

