package org.geotools.data.ogr.bridj;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ValuedEnum;
import org.bridj.ann.CLong;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.geotools.data.ogr.bridj.CplErrorLibrary.CPLErr;
/**
 * Wrapper for library <b>osr</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("osr") 
@Runtime(CRuntime.class) 
public class OsrLibrary {
	static {
		BridJ.register();
	}
	public enum OGRAxisOrientation implements IntValuedEnum<OGRAxisOrientation > {
		OAO_Other(0),
		OAO_North(1),
		OAO_South(2),
		OAO_East(3),
		OAO_West(4),
		OAO_Up(5),
		OAO_Down(6);
		OGRAxisOrientation(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<OGRAxisOrientation > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<OGRAxisOrientation > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public enum OGRDatumType implements IntValuedEnum<OGRDatumType > {
		ODT_HD_Min(1000),
		ODT_HD_Other(1000),
		ODT_HD_Classic(1001),
		ODT_HD_Geocentric(1002),
		ODT_HD_Max(1999),
		ODT_VD_Min(2000),
		ODT_VD_Other(2000),
		ODT_VD_Orthometric(2001),
		ODT_VD_Ellipsoidal(2002),
		ODT_VD_AltitudeBarometric(2003),
		ODT_VD_Normal(2004),
		ODT_VD_GeoidModelDerived(2005),
		ODT_VD_Depth(2006),
		ODT_VD_Max(2999),
		ODT_LD_Min(10000),
		ODT_LD_Max(32767);
		OGRDatumType(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<OGRDatumType > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static ValuedEnum<OGRDatumType > fromValue(long value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_IMW_POLYCONIC = (String)"International_Map_of_the_World_Polyconic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_CYLINDRICAL_EQUAL_AREA = (String)"Cylindrical_Equal_Area";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_SCALE_FACTOR = (String)"scale_factor";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_VII = (String)"Wagner_VII";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_GALL_STEREOGRAPHIC = (String)"Gall_Stereographic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_EQUIDISTANT_CONIC = (String)"Equidistant_Conic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_V = (String)"Eckert_V";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_ORIGIN = (String)"longitude_of_origin";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_SWISS_OBLIQUE_CYLINDRICAL = (String)"Swiss_Oblique_Cylindrical";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_POINT_3 = (String)"longitude_of_point_3";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_POINT_1 = (String)"latitude_of_point_1";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_POINT_3 = (String)"latitude_of_point_3";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_POINT_2 = (String)"latitude_of_point_2";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_SATELLITE_HEIGHT = (String)"satellite_height";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_POINT_1 = (String)"longitude_of_point_1";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_POINT_2 = (String)"longitude_of_point_2";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_RECTIFIED_GRID_ANGLE = (String)"rectified_grid_angle";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_SINUSOIDAL = (String)"Sinusoidal";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_VANDERGRINTEN = (String)"VanDerGrinten";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_MOLLWEIDE = (String)"Mollweide";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP_BELGIUM = (String)"Lambert_Conformal_Conic_2SP_Belgium";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_DN_WGS72 = (String)"WGS_1972";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_NAUTICAL_MILE = (String)"Nautical Mile";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_I = (String)"Wagner_I";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_EQUIRECTANGULAR = (String)"Equirectangular";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_DN_WGS84 = (String)"WGS_1984";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_V = (String)"Wagner_V";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ORTHOGRAPHIC = (String)"Orthographic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_POLAR_STEREOGRAPHIC = (String)"Polar_Stereographic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_FIPSZONE = (String)"fipszone";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_III = (String)"Wagner_III";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_GNOMONIC = (String)"Gnomonic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_LAMBERT_CONFORMAL_CONIC_1SP = (String)"Lambert_Conformal_Conic_1SP";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_GOODE_HOMOLOSINE = (String)"Goode_Homolosine";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LANDSAT_NUMBER = (String)"landsat_number";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_MI_25 = (String)"Transverse_Mercator_MapInfo_25";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_MI_22 = (String)"Transverse_Mercator_MapInfo_22";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_MI_21 = (String)"Transverse_Mercator_MapInfo_21";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_MI_24 = (String)"Transverse_Mercator_MapInfo_24";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_MI_23 = (String)"Transverse_Mercator_MapInfo_23";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_2ND_POINT = (String)"Latitude_Of_2nd_Point";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_MERCATOR_1SP = (String)"Mercator_1SP";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_STEREOGRAPHIC = (String)"Stereographic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_WKT_WGS84 = (String)"GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9108\"]],AUTHORITY[\"EPSG\",\"4326\"]]";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_CHAIN = (String)"Chain";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_II = (String)"Wagner_II";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_IV = (String)"Wagner_IV";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_CENTER = (String)"longitude_of_center";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_ORIGIN = (String)"latitude_of_origin";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_FALSE_EASTING = (String)"false_easting";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_GAUSSSCHREIBERTMERCATOR = (String)"Gauss_Schreiber_Transverse_Mercator";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_1ST_POINT = (String)"Longitude_Of_1st_Point";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_I = (String)"Eckert_I";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_III = (String)"Eckert_III";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_LINK = (String)"Link";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LONGITUDE_OF_2ND_POINT = (String)"Longitude_Of_2nd_Point";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_OBLIQUE_STEREOGRAPHIC = (String)"Oblique_Stereographic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_DN_NAD83 = (String)"North_American_Datum_1983";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_BONNE = (String)"Bonne";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_WAGNER_VI = (String)"Wagner_VI";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_AZIMUTHAL_EQUIDISTANT = (String)"Azimuthal_Equidistant";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_CENTER = (String)"latitude_of_center";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_US_FOOT = (String)"Foot_US";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final double SRS_WGS84_INVFLATTENING = (double)298.257223563;
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TWO_POINT_EQUIDISTANT = (String)"Two_Point_Equidistant";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_FALSE_NORTHING = (String)"false_northing";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_DN_NAD27 = (String)"North_American_Datum_1927";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_PSEUDO_STD_PARALLEL_1 = (String)"pseudo_standard_parallel_1";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UA_DEGREE = (String)"degree";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_VI = (String)"Eckert_VI";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_LATITUDE_OF_1ST_POINT = (String)"Latitude_Of_1st_Point";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_POLYCONIC = (String)"Polyconic";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_KROVAK = (String)"Krovak";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_CHAIN_CONV = (String)"20.116684023368047";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ALBERS_CONIC_EQUAL_AREA = (String)"Albers_Conic_Equal_Area";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_ZONE = (String)"zone";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_ROD = (String)"Rod";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ROBINSON = (String)"Robinson";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_PATH_NUMBER = (String)"path_number";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_LAMBERT_AZIMUTHAL_EQUAL_AREA = (String)"Lambert_Azimuthal_Equal_Area";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UA_DEGREE_CONV = (String)"0.0174532925199433";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_PERSPECTIVE_POINT_HEIGHT = (String)"perspective_point_height";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PM_GREENWICH = (String)"Greenwich";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_ROD_CONV = (String)"5.02921005842012";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_MERCATOR_2SP = (String)"Mercator_2SP";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR_SOUTH_ORIENTED = (String)"Transverse_Mercator_South_Orientated";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_NAUTICAL_MILE_CONV = (String)"1852.0";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_MILLER_CYLINDRICAL = (String)"Miller_Cylindrical";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_AZIMUTH = (String)"azimuth";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TRANSVERSE_MERCATOR = (String)"Transverse_Mercator";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_CENTRAL_MERIDIAN = (String)"central_meridian";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_GEOSTATIONARY_SATELLITE = (String)"Geostationary_Satellite";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_STANDARD_PARALLEL_2 = (String)"standard_parallel_2";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PP_STANDARD_PARALLEL_1 = (String)"standard_parallel_1";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP = (String)"Lambert_Conformal_Conic_2SP";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_LINK_CONV = (String)"0.20116684023368047";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_HOTINE_OBLIQUE_MERCATOR = (String)"Hotine_Oblique_Mercator";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_NEW_ZEALAND_MAP_GRID = (String)"New_Zealand_Map_Grid";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_LABORDE_OBLIQUE_MERCATOR = (String)"Laborde_Oblique_Mercator";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_TUNISIA_MINING_GRID = (String)"Tunisia_Mining_Grid";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_FOOT_CONV = (String)"0.3048";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UA_RADIAN = (String)"radian";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_CASSINI_SOLDNER = (String)"Cassini_Soldner";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_IV = (String)"Eckert_IV";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final double SRS_WGS84_SEMIMAJOR = (double)6378137.0;
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_ECKERT_II = (String)"Eckert_II";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_PT_HOTINE_OBLIQUE_MERCATOR_TWO_POINT_NATURAL_ORIGIN = (String)"Hotine_Oblique_Mercator_Two_Point_Natural_Origin";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_METER = (String)"Meter";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_FOOT = (String)"Foot (International)";
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h</i>
	public static final String SRS_UL_US_FOOT_CONV = (String)"0.3048006096012192";
	/**
	 * Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.<br>
	 * Return number of bytes read.<br>
	 * <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:1369</i>
	 */
	public static abstract class __io_read_fn extends Callback<__io_read_fn > {
		public abstract int apply(Pointer<? > __cookie, Pointer<Byte > __buf, @Ptr long __nbytes);
	};
	/**
	 * Write N bytes pointed to by BUF to COOKIE.  Write all N bytes<br>
	 * unless there is an error.  Return number of bytes written, or -1 if<br>
	 * there is an error without writing anything.  If the file has been<br>
	 * opened for append (__mode.__append set), then set the file pointer<br>
	 * to the end of the file and then do the write; if not, just write at<br>
	 * the current file pointer.<br>
	 * <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:1378</i>
	 */
	public static abstract class __io_write_fn extends Callback<__io_write_fn > {
		public abstract int apply(Pointer<? > __cookie, Pointer<Byte > __buf, @Ptr long __n);
	};
	/**
	 * Move COOKIE's file position to *POS bytes from the<br>
	 * beginning of the file (if W is SEEK_SET),<br>
	 * the current position (if W is SEEK_CUR),<br>
	 * or the end of the file (if W is SEEK_END).<br>
	 * Set *POS to the new file position.<br>
	 * Returns zero if successful, nonzero if not.<br>
	 * <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:1387</i>
	 */
	public static abstract class __io_seek_fn extends Callback<__io_seek_fn > {
		public abstract int apply(Pointer<? > __cookie, Pointer<Integer > __pos, int __w);
	};
	/**
	 * Close COOKIE.<br>
	 * <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:1389</i>
	 */
	public static abstract class __io_close_fn extends Callback<__io_close_fn > {
		public abstract int apply(Pointer<? > __cookie);
	};
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:2497</i>
	public static abstract class __compar_fn_t extends Callback<__compar_fn_t > {
		public abstract int apply(Pointer<? > voidPtr1, Pointer<? > voidPtr2);
	};
	/// <i>native declaration : /home/aaime/devel/gdal/gdal-1.8.0/ogr/ogr_srs_api.h:3657</i>
	public static abstract class CPLErrorHandler extends Callback<CPLErrorHandler > {
		public abstract void apply(ValuedEnum<CPLErr > CPLErr1, int int1, Pointer<Byte > charPtr1);
	};
	public static native Pointer<Byte > OSRAxisEnumToName(ValuedEnum<OsrLibrary.OGRAxisOrientation > eOrientation);
	public static native Pointer<? > OSRNewSpatialReference(Pointer<Byte > charPtr1);
	public static native Pointer<? > OSRCloneGeogCS(Pointer<? > OGRSpatialReferenceH1);
	public static native Pointer<? > OSRClone(Pointer<? > OGRSpatialReferenceH1);
	public static native void OSRDestroySpatialReference(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRReference(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRDereference(Pointer<? > OGRSpatialReferenceH1);
	public static native void OSRRelease(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRValidate(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRFixupOrdering(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRFixup(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRStripCTParms(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRImportFromEPSG(Pointer<? > OGRSpatialReferenceH1, int int1);
	public static native int OSRImportFromEPSGA(Pointer<? > OGRSpatialReferenceH1, int int1);
	public static native int OSRImportFromWkt(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRImportFromProj4(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1);
	public static native int OSRImportFromESRI(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRImportFromPCI(Pointer<? > hSRS, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Double > doublePtr1);
	public static native int OSRImportFromUSGS(Pointer<? > OGRSpatialReferenceH1, @CLong long l1, @CLong long l2, Pointer<Double > doublePtr1, @CLong long l3);
	public static native int OSRImportFromXML(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1);
	public static native int OSRImportFromDict(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2);
	public static native int OSRImportFromPanorama(Pointer<? > OGRSpatialReferenceH1, @CLong long l1, @CLong long l2, @CLong long l3, Pointer<Double > doublePtr1);
	public static native int OSRImportFromOzi(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3);
	public static native int OSRImportFromMICoordSys(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1);
	public static native int OSRImportFromERM(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3);
	public static native int OSRImportFromUrl(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1);
	public static native int OSRExportToWkt(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRExportToPrettyWkt(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1, int int1);
	public static native int OSRExportToProj4(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRExportToPCI(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Pointer<Byte > > charPtrPtr2, Pointer<Pointer<Double > > doublePtrPtr1);
	public static native int OSRExportToUSGS(Pointer<? > OGRSpatialReferenceH1, Pointer<CLong > lPtr1, Pointer<CLong > lPtr2, Pointer<Pointer<Double > > doublePtrPtr1, Pointer<CLong > lPtr3);
	public static native int OSRExportToXML(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1, Pointer<Byte > charPtr1);
	public static native int OSRExportToPanorama(Pointer<? > OGRSpatialReferenceH1, Pointer<CLong > lPtr1, Pointer<CLong > lPtr2, Pointer<CLong > lPtr3, Pointer<CLong > lPtr4, Pointer<Double > doublePtr1);
	public static native int OSRExportToMICoordSys(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRExportToERM(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, Pointer<Byte > charPtr2, Pointer<Byte > charPtr3);
	public static native int OSRMorphToESRI(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRMorphFromESRI(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRSetAttrValue(Pointer<? > hSRS, Pointer<Byte > pszNodePath, Pointer<Byte > pszNewNodeValue);
	public static native Pointer<Byte > OSRGetAttrValue(Pointer<? > hSRS, Pointer<Byte > pszName, int iChild);
	public static native int OSRSetAngularUnits(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, double double1);
	public static native double OSRGetAngularUnits(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRSetLinearUnits(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, double double1);
	public static native int OSRSetLinearUnitsAndUpdateParameters(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, double double1);
	public static native double OSRGetLinearUnits(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native double OSRGetPrimeMeridian(Pointer<? > OGRSpatialReferenceH1, Pointer<Pointer<Byte > > charPtrPtr1);
	public static native int OSRIsGeographic(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRIsLocal(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRIsProjected(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRIsVertical(Pointer<? > OGRSpatialReferenceH1);
	public static native int OSRIsSameGeogCS(Pointer<? > OGRSpatialReferenceH1, Pointer<? > OGRSpatialReferenceH2);
	//public static native int OSRIsVertCS(Pointer<? > OGRSpatialReferenceH1, Pointer<? > OGRSpatialReferenceH2);
	public static native int OSRIsSame(Pointer<? > OGRSpatialReferenceH1, Pointer<? > OGRSpatialReferenceH2);
	public static native int OSRSetLocalCS(Pointer<? > hSRS, Pointer<Byte > pszName);
	public static native int OSRSetProjCS(Pointer<? > hSRS, Pointer<Byte > pszName);
	public static native int OSRSetWellKnownGeogCS(Pointer<? > hSRS, Pointer<Byte > pszName);
	public static native int OSRSetFromUserInput(Pointer<? > hSRS, Pointer<Byte > charPtr1);
	public static native int OSRCopyGeogCSFrom(Pointer<? > hSRS, Pointer<? > hSrcSRS);
	public static native int OSRSetTOWGS84(Pointer<? > hSRS, double double1, double double2, double double3, double double4, double double5, double double6, double double7);
	public static native int OSRGetTOWGS84(Pointer<? > hSRS, Pointer<Double > doublePtr1, int int1);
	public static native int OSRSetGeogCS(Pointer<? > hSRS, Pointer<Byte > pszGeogName, Pointer<Byte > pszDatumName, Pointer<Byte > pszEllipsoidName, double dfSemiMajor, double dfInvFlattening, Pointer<Byte > pszPMName, double dfPMOffset, Pointer<Byte > pszUnits, double dfConvertToRadians);
	public static native double OSRGetSemiMajor(Pointer<? > OGRSpatialReferenceH1, Pointer<Integer > OGRErrPtr1);
	public static native double OSRGetSemiMinor(Pointer<? > OGRSpatialReferenceH1, Pointer<Integer > OGRErrPtr1);
	public static native double OSRGetInvFlattening(Pointer<? > OGRSpatialReferenceH1, Pointer<Integer > OGRErrPtr1);
	public static native int OSRSetAuthority(Pointer<? > hSRS, Pointer<Byte > pszTargetKey, Pointer<Byte > pszAuthority, int nCode);
	public static native Pointer<Byte > OSRGetAuthorityCode(Pointer<? > hSRS, Pointer<Byte > pszTargetKey);
	public static native Pointer<Byte > OSRGetAuthorityName(Pointer<? > hSRS, Pointer<Byte > pszTargetKey);
	public static native int OSRSetProjection(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1);
	public static native int OSRSetProjParm(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, double double1);
	public static native double OSRGetProjParm(Pointer<? > hSRS, Pointer<Byte > pszParmName, double dfDefault, Pointer<Integer > OGRErrPtr1);
	public static native int OSRSetNormProjParm(Pointer<? > OGRSpatialReferenceH1, Pointer<Byte > charPtr1, double double1);
	public static native double OSRGetNormProjParm(Pointer<? > hSRS, Pointer<Byte > pszParmName, double dfDefault, Pointer<Integer > OGRErrPtr1);
	public static native int OSRSetUTM(Pointer<? > hSRS, int nZone, int bNorth);
	public static native int OSRGetUTMZone(Pointer<? > hSRS, Pointer<Integer > pbNorth);
	public static native int OSRSetStatePlane(Pointer<? > hSRS, int nZone, int bNAD83);
	public static native int OSRSetStatePlaneWithUnits(Pointer<? > hSRS, int nZone, int bNAD83, Pointer<Byte > pszOverrideUnitName, double dfOverrideUnit);
	public static native int OSRAutoIdentifyEPSG(Pointer<? > hSRS);
	public static native int OSREPSGTreatsAsLatLong(Pointer<? > hSRS);
	public static native Pointer<Byte > OSRGetAxis(Pointer<? > hSRS, Pointer<Byte > pszTargetKey, int iAxis, Pointer<ValuedEnum<OsrLibrary.OGRAxisOrientation > > peOrientation);
	//public static native int OSRSetAxes(Pointer<Byte > pszTargetKey, Pointer<Byte > pszXAxisName, ValuedEnum<OsrLibrary.OGRAxisOrientation > eXAxisOrientation, Pointer<Byte > pszYAxisName, ValuedEnum<OsrLibrary.OGRAxisOrientation > eYAxisOrientation);
	public static native int OSRSetACEA(Pointer<? > hSRS, double dfStdP1, double dfStdP2, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetAE(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetBonne(Pointer<? > hSRS, double dfStandardParallel, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetCEA(Pointer<? > hSRS, double dfStdP1, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetCS(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEC(Pointer<? > hSRS, double dfStdP1, double dfStdP2, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEckert(Pointer<? > hSRS, int nVariation, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEckertIV(Pointer<? > hSRS, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEckertVI(Pointer<? > hSRS, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEquirectangular(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetEquirectangular2(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfPseudoStdParallel1, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetGS(Pointer<? > hSRS, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetGH(Pointer<? > hSRS, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetGEOS(Pointer<? > hSRS, double dfCentralMeridian, double dfSatelliteHeight, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetGaussSchreiberTMercator(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetGnomonic(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetHOM(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfAzimuth, double dfRectToSkew, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetHOM2PNO(Pointer<? > hSRS, double dfCenterLat, double dfLat1, double dfLong1, double dfLat2, double dfLong2, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetIWMPolyconic(Pointer<? > hSRS, double dfLat1, double dfLat2, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetKrovak(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfAzimuth, double dfPseudoStdParallelLat, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetLAEA(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetLCC(Pointer<? > hSRS, double dfStdP1, double dfStdP2, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetLCC1SP(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetLCCB(Pointer<? > hSRS, double dfStdP1, double dfStdP2, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetMC(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetMercator(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetMollweide(Pointer<? > hSRS, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetNZMG(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetOS(Pointer<? > hSRS, double dfOriginLat, double dfCMeridian, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetOrthographic(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetPolyconic(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetPS(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetRobinson(Pointer<? > hSRS, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetSinusoidal(Pointer<? > hSRS, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetStereographic(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetSOC(Pointer<? > hSRS, double dfLatitudeOfOrigin, double dfCentralMeridian, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetTM(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetTMVariant(Pointer<? > hSRS, Pointer<Byte > pszVariantName, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetTMG(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetTMSO(Pointer<? > hSRS, double dfCenterLat, double dfCenterLong, double dfScale, double dfFalseEasting, double dfFalseNorthing);
	public static native int OSRSetVDG(Pointer<? > hSRS, double dfCenterLong, double dfFalseEasting, double dfFalseNorthing);
	//public static native int OSRSetWagner(Pointer<? > hSRS, int nVariation, double dfFalseEasting, double dfFalseNorthing);
	public static native void OSRCleanup();
	public static native Pointer<? > OCTNewCoordinateTransformation(Pointer<? > hSourceSRS, Pointer<? > hTargetSRS);
	public static native void OCTDestroyCoordinateTransformation(Pointer<? > OGRCoordinateTransformationH1);
	public static native int OCTTransform(Pointer<? > hCT, int nCount, Pointer<Double > x, Pointer<Double > y, Pointer<Double > z);
	public static native int OCTTransformEx(Pointer<? > hCT, int nCount, Pointer<Double > x, Pointer<Double > y, Pointer<Double > z, Pointer<Integer > pabSuccess);
	public static native Pointer<Byte > OCTProj4Normalize(Pointer<Byte > pszProj4Src);
	public static native Pointer<Pointer<Byte > > OPTGetProjectionMethods();
	public static native Pointer<Pointer<Byte > > OPTGetParameterList(Pointer<Byte > pszProjectionMethod, Pointer<Pointer<Byte > > ppszUserName);
	public static native int OPTGetParameterInfo(Pointer<Byte > pszProjectionMethod, Pointer<Byte > pszParameterName, Pointer<Pointer<Byte > > ppszUserName, Pointer<Pointer<Byte > > ppszType, Pointer<Double > pdfDefaultValue);
	public int sys_nerr() {
		try {
			return (int)BridJ.getNativeLibrary("osr").getSymbolPointer("sys_nerr").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public OsrLibrary sys_nerr(int sys_nerr) {
		try {
			{
				BridJ.getNativeLibrary("osr").getSymbolPointer("sys_nerr").as(int.class).set(sys_nerr);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// This variable is used by `gamma' and `lgamma'.
	public int signgam() {
		try {
			return (int)BridJ.getNativeLibrary("osr").getSymbolPointer("signgam").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// This variable is used by `gamma' and `lgamma'.
	public OsrLibrary signgam(int signgam) {
		try {
			{
				BridJ.getNativeLibrary("osr").getSymbolPointer("signgam").as(int.class).set(signgam);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Conversion Error : extern _LIB_VERSION_TYPE (Unsupported type)
	/// Undefined type
	public static interface _IO_FILE_plus {
		
	};
	/// Undefined type
	public static interface locale_data {
		
	};
}
